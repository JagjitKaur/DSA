/**
 * @param {number[]} nums
 * @return {number[][]}
 */
const letterCombinations = (digits) =>{
    let result = [];
    let numberHash =  {
        '2' :['a','b','c'],
        '3' :['d','e','f'],
        '4' :['g','h','i'],
        '5' :['j','k','l'],
        '6' :['m','n','o'],
        '7' :['p','q','r','s'],
        '8' :['t','u','v'],
        '9' :['w','x','y','z']
    };
    function helper(i,slate) {
        //base
        if(slate.length === digits.length) {
            result.push(slate.join(''));
            return;
        }
        let digitList = numberHash[digits[i]];
        for(let digit of digitList){
            slate.push(digit);
            helper(i+1, slate);
            slate.pop();
        }

    }
    helper(0, []);
    return  digits.length? result: [];
}
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
//https://leetcode.com/problems/subsets/description/
space: output(2 power n .n)+aux space(n) + input(n)
time : leaf worker(2 power n)+ internal(n)