/**
 * @param {number[]} nums
 * @return {number[][]}
 */
const permuteUnique = (nums) =>{
    let result = [];
    //nums = nums.sort();
    const helper =(nums,i, slate) => {
        //base
        if(i >=nums.length) {
            //create copy of slate using [...slate] instead of pushing like result.push(slate)
            result.push([...slate]);
            return;
        }
        for(let j=i;j<nums.length;j++){
            if(!hash[nums[j]]){
                slate.push(nums[j]);
                hash[nums[j]] = true;
                [nums[i], nums[j]] = [nums[j], nums[i]];
                helper(nums,i+1,slate);
                slate.pop();
                //if we donot do this swap, our next swap would get messed up and we wont get all permutations
                [nums[i], nums[j]] = [nums[j], nums[i]];
            }
        }
    }
    helper(0, []);
    return result;
}
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
//https://leetcode.com/problems/permutations/
space: output(n! .n)+aux space(n) + input(n)
time : leaf worker(n!n)+ internal(n!n)