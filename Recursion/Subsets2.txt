/**
 * @param {number[]} nums
 * @return {number[][]}
 */
const subsetsWithDup = (nums) =>{
    let result =[];
    nums = nums.sort();
    function helper(i,slate) {
        //base
        if(i == nums.length) {
            result.push([...slate]);
            return output;
        }
        let count = 0;
        for(let index=i; index<nums.length;index++) {
            if(nums[index]!== nums[i]) {
                break;
            }
            count++;
        }
        //exclude
        helper(i+count,slate);
        //include
            for(let j=0;j<count;j++) {
                slate.push(nums[i]);
                helper(i+count,slate);
            }
            for(let k=0;k<count;k++) {
                slate.pop();
            }
    }
    helper(0,[]);
    return output;
}
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
//https://leetcode.com/problems/subsets/description/
space: output(2 power n .n)+aux space(n) + input(n)
time : leaf worker(2 power n)+ internal(n)