/**
 * @param {number[]} nums
 * @return {number[][]}
 */
const subsets = (nums) =>{
    let result = [];
    function helper(i, slate) {
        //base
        if(i >=nums.length) {
            //create copy of slate using [...slate] instead of pushing like result.push(slate)
            result.push([...slate]);
            return;
        }
        //exclude
        helper(i+1,slate);
        //include
        slate.push(nums[i]);
        helper(i+1,slate);
        slate.pop();
    }
    helper(0, []);
    return result;
}
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
//https://leetcode.com/problems/subsets/description/
space: output(2 power n .n)+aux space(n) + input(n)
time : leaf worker(2 power n)+ internal(n)